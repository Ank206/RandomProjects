/* Option 2: Import via CSS */
@import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css");

:root {
  --pink: hsl(338, 70%, 55%);
  --teal: hsl(183, 70%, 62%);
  --white: hsl(334, 7%, 95%);
}

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  background: hsl(224, 32%, 12%);
  background-image: conic-gradient(
    from 0deg at 50% 50%,
    blue,
    purple,
    purple,
    blue
  );
  background-blend-mode: multiply;
  color: white;
  min-block-size: 100dvh;
  display: grid;
  place-items: center;
  height: 100vh;
  overflow: hidden;
  /* background-color: #fff; */
}

pre {
  --selector: var(--pink);
  --property: var(--teal);
  --punctuation: var(--white);

  font-size: 2.1rem;
  font-weight: bold;
  background: hsl(222, 45%, 7%);
  padding: 2rem;
  border-radius: 1rem;

  position: relative;
  transform-style: preserve-3d;

  /* *Making it 3D* */
  transform: perspective(2000px) rotateY(var(--rotateY)) rotateX(var(--rotateX));
}
.selector {
  color: var(--selector);
}
.property {
  color: var(--property);
}
.punctuation {
  color: var(--punctuation);
}

/* Adjacent Selector; if there is a Punctaution following a property than that must follow the below specified rules */
.property + .punctuation {
  color: var(--property);
}

pre > * {
  text-shadow: 0 0 0.3em currentColor;
}

pre::before,
pre::after {
  content: "";
  position: absolute;
  border-radius: inherit;
}

pre::before {
  inset: 0.75rem;
  background: black;
  transform: translateZ(-39px);
  filter: blur(15px);
  opacity: 0.3;
}

/* After and Befor are 2 seprate blocks, over the actuall box */

pre::after {
  inset: -1rem;
  background: linear-gradient(-45deg, red, blue);
  transform: translateZ(-40px);
}

.dot {
  height: 1px;
  width: 1px;
  position: absolute;
  background-color: white;
  /* background: hsl(224, 32%, 12%); */
  /* background-image: conic-gradient(
    from 0deg at 50% 50%,
    var(--pink),
    var(--teal)
  ); */
  /* background-blend-mode: multiply; */
  /* border-radius: 5px; */
}

@keyframes fall-1 {
  0% {
    transform: translate(0px, 0px) rotateX(45deg) rotateY(30deg) rotateZ(0deg)
      scale(0.25);
    opacity: 0;
  }

  5% {
    transform: translate(10px, -10px) rotateX(45deg) rotateY(30deg)
      rotateZ(0deg) scale(1);
    opacity: 1;
  }

  100% {
    transform: translate(25px, 200px) rotateX(180deg) rotateY(270deg)
      rotateZ(90deg) scale(1);
    opacity: 0;
  }
}

@keyframes fall-2 {
  0% {
    transform: translate(0px, 0px) rotateX(-20deg) rotateY(10deg) scale(0.25);
    opacity: 0;
  }

  10% {
    transform: translate(-10px, -5px) rotateX(-20deg) rotateY(10deg) scale(1);
    opacity: 1;
  }

  100% {
    transform: translate(-10px, 160px) rotateX(-90deg) rotateY(45deg)
      scale(0.25);
    opacity: 0;
  }
}

@keyframes fall-3 {
  0% {
    transform: translate(0px, 0px) rotateX(0deg) rotateY(45deg) scale(0.5);
    opacity: 0;
  }

  15% {
    transform: translate(7px, 5px) rotateX(0deg) rotateY(45deg) scale(1);
    opacity: 1;
  }

  100% {
    transform: translate(20px, 120px) rotateX(-180deg) rotateY(-90deg)
      scale(0.5);
    opacity: 0;
  }
}
